// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"
)

const createTaskAndGetBacklog = `-- name: CreateTaskAndGetBacklog :one
WITH inserted_task AS (
    INSERT INTO tasks (type, value, state, creation_time, last_update_time)
    VALUES ($1, $2, $3, $4, EXTRACT(epoch FROM clock_timestamp() AT TIME ZONE 'UTC'))
    RETURNING id
)
SELECT
    (SELECT id FROM inserted_task) AS task_id,
    (SELECT COUNT(*) FROM tasks WHERE tasks.state = 'pending') AS backlog_count
`

type CreateTaskAndGetBacklogParams struct {
	Type         int32
	Value        int32
	State        TaskState
	CreationTime float64
}

type CreateTaskAndGetBacklogRow struct {
	TaskID       int32
	BacklogCount int64
}

func (q *Queries) CreateTaskAndGetBacklog(ctx context.Context, arg CreateTaskAndGetBacklogParams) (CreateTaskAndGetBacklogRow, error) {
	row := q.db.QueryRowContext(ctx, createTaskAndGetBacklog,
		arg.Type,
		arg.Value,
		arg.State,
		arg.CreationTime,
	)
	var i CreateTaskAndGetBacklogRow
	err := row.Scan(&i.TaskID, &i.BacklogCount)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, type, value, state, creation_time, last_update_time
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const getTaskByIDUpdateState = `-- name: GetTaskByIDUpdateState :one
WITH modified AS (
	UPDATE tasks
	SET state = $2
	WHERE id = $1
	RETURNING id, type, value, state, creation_time, last_update_time
)
SELECT id, type, value, state, creation_time, last_update_time FROM modified
`

type GetTaskByIDUpdateStateParams struct {
	ID    int32
	State TaskState
}

type GetTaskByIDUpdateStateRow struct {
	ID             int32
	Type           int32
	Value          int32
	State          TaskState
	CreationTime   float64
	LastUpdateTime float64
}

func (q *Queries) GetTaskByIDUpdateState(ctx context.Context, arg GetTaskByIDUpdateStateParams) (GetTaskByIDUpdateStateRow, error) {
	row := q.db.QueryRowContext(ctx, getTaskByIDUpdateState, arg.ID, arg.State)
	var i GetTaskByIDUpdateStateRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const updateTaskToState = `-- name: UpdateTaskToState :exec
UPDATE tasks
SET state = $2, last_update_time = clock_timestamp() AT TIME ZONE 'UTC'
WHERE id = $1
`

type UpdateTaskToStateParams struct {
	ID    int32
	State TaskState
}

func (q *Queries) UpdateTaskToState(ctx context.Context, arg UpdateTaskToStateParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskToState, arg.ID, arg.State)
	return err
}
